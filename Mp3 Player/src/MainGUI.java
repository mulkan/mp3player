
import jaco.mp3.player.MP3Player;
import java.awt.EventQueue;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.mp3.Mp3Parser;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    MP3Player player;
    DefaultListModel demolist;
    Thread pewaktu;
    int waktuBerjalan;
    boolean pause;
    int durasiWaktu;
    public MainGUI() throws InterruptedException {
        initComponents();
        player = new MP3Player();
        pewaktu = new Thread();
        waktuBerjalan=1;
        pause = false;
        load();
    }

    void load() throws InterruptedException{
        File f = new File("D:/");
        demolist = new DefaultListModel();
        
        
        File[] f2 = f.listFiles(new FilenameFilter(){
            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".mp3");
            }
        });
        new Thread(){
            public void run(){
                for(int i=0;i<f2.length;i++){
                //System.out.println(f2[i].getAbsolutePath());
                demolist.addElement(f2[i].getAbsolutePath());
                jList1.setModel(demolist);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            }
        }.start();
            
        
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        waktuMulai = new javax.swing.JLabel();
        btnStop = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        waktuSelesai = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        waktuMulai.setText("waktu mulai");

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        jProgressBar1.setForeground(new java.awt.Color(255, 153, 153));

        waktuSelesai.setText("waktu selesai");

        jLabel3.setText("Playlist");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(waktuMulai)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(waktuSelesai))
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnStop)
                    .addComponent(btnPause))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waktuMulai)
                    .addComponent(waktuSelesai))
                .addGap(15, 15, 15)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private int getDuration(String fileLocation){
        int duration = 1;

        try {
            InputStream input = new FileInputStream(new File(fileLocation));
            ContentHandler handler =  (ContentHandler) new DefaultHandler();
            Metadata metadata = new Metadata();
            Parser parser = new Mp3Parser();
            //parser = new PDFParser();
            ParseContext parseCtx = new ParseContext();
            parser.parse(input,  handler, metadata, parseCtx);
            input.close();

            
            double d  = Double.valueOf(metadata.get("xmpDM:duration")); 
            duration = (int) d;
            

        } catch (FileNotFoundException e) {
        } catch (IOException | SAXException | TikaException e) {
            System.out.println(e.toString());
        }
        return duration;
    }
    private void play(){
        if(pewaktu.isAlive()){
            pewaktu.stop();
        }
        
        String judul = this.jList1.getSelectedValue();
        durasiWaktu = getDuration(judul);
        int menit =  durasiWaktu/60;
        int detik = (int)(durasiWaktu-menit*60);
                    
        waktuSelesai.setText(String.valueOf(menit)+" menit "+String.valueOf(detik)+" detik");
                    
        //jLabel2.setText(String.valueOf(durasiWaktu));
        this.jProgressBar1.setMaximum(durasiWaktu);
        
        
        if(pause==false){ //mulai ulang lagi
            waktuBerjalan = 1;
            player.stop();
        
            player = new MP3Player();
            player.addToPlayList(new File(judul));

            //player.setRepeat(true);
            //player.setShuffle(true); 
            pause = false;
        }else{
            
        }
              
        
        
        
        Thread tr = new Thread(new Runnable(){
           @Override
           public void run() {
               player.play();
               File f = new File(String.valueOf( player.getPlayList().get(0)));
               
               String judul = f.getName();
               judul = judul.replaceAll("%20"," ");
               setTitle(judul);
                while(!player.isStopped()){
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
            
           }
        });
        
        tr.start();
        progress();
        
    }
    private void progress(){
        pewaktu = new Thread(){
            public void run(){
                
                while(true){
                    
                    double menit = Math.floor(waktuBerjalan/60);
                    int detik = (int)(waktuBerjalan-menit*60);
                    
                    waktuMulai.setText(String.valueOf(menit)+" menit "+String.valueOf(detik)+" detik");
                    jProgressBar1.setValue(waktuBerjalan);
                    if(waktuBerjalan==durasiWaktu){
                        waktuBerjalan = 1;
                    }
                    
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    waktuBerjalan++;
                }
            }
        };
        pewaktu.start();
    }
    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
        play();
        
       
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        // TODO add your handling code here:
        player.pause();
        pewaktu.stop();
//        Thread tr = new Thread(){
//            public void run(){
//                int waktuBerjalan=0;
//                while(true){
//                    setTitle(String.valueOf(waktuBerjalan));
//                    try {
//                        Thread.sleep((long) 0.001);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    waktuBerjalan++;
//                }
//            }
//        };
//        tr.start();
        //tr.run();
        System.out.println("done");
        pause = true;
        
        
        
    }//GEN-LAST:event_btnPauseActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jList1MouseClicked

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        List judul = jList1.getSelectedValuesList();
        for(int i =0;i<judul.size();i++){
            System.out.println(judul.get(i));
        }
        player.stop();
        pause=false;
        waktuBerjalan = 1;
        waktuMulai.setText(String.valueOf(waktuBerjalan));
        pewaktu.stop();
        
    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainGUI().setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel waktuMulai;
    private javax.swing.JLabel waktuSelesai;
    // End of variables declaration//GEN-END:variables
}
